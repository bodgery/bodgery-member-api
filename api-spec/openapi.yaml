openapi: 3.0.1
servers:
  - url: '{protocol}://www.thebodgery.com/api'
    variables:
      protocol:
        description: The Bodgery API is accessible via https and http
        enum:
          - https
          - http
        default: https
info:
  description: >-
    The Bodgery api allows users to query access many programatic functions 
    related to The Bodgery makerspace in Madison, WI. These functions include
    querying Wild Apricot for current member status and tool checkoff status. It
    also includes task management functions. More functionality to be added  as
    needed.
  version: 1.0.0
  title: Bodgery API
  contact:
    name: Bodgery IT Team
    email: it@thebodgery.org
tags:
  - name: Tasks
    description: Manage shop related tasks
  - name: Members
    description: Get member status
  - name: Tools
    description: Get Tool info
  - name: Telemetry
    description: 'Get telemetry information such as temp, air quality, or  shop open status'
paths:
  /:
    get:
      operationId: listApiVersions
      summary: List Api Versions
      tags:
        - Utility
      responses:
        '200':
          description: Request OK
  /v1:
    get:
      operationId: getApiVersionDetailsv1
      summary: Show details for Api version 1
      tags:
        - Utility
      responses:
        '200':
          description: Request OK
  /v1/tools:
    get:
      operationId: getToolsv1
      summary: Get all tools
      tags:
        - Tools
      parameters:
        - name: id
          in: query
          description: toolId to pull a single tool
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: maximum number of members to return
          required: false
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          description: number of members to skip
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: property to sort returned members by
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Request OK - Member response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members'
        '404':
          description: Member not found
  /tasks:
    get:
      tags:
        - Tasks
      operationId: listTasks
      summary: List available tasks
      responses:
        '200':
          description: Returns a list of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskList'
              example:
                tasks:
                  - id: '0'
                    name: Empty trash into bins
                    description: >-
                      All inside trash and recycling bins should be emptied into
                      the large rolling bins outside the building
                  - id: '1'
                    name: Take bins to curb
                    description: >-
                      Outside rolling trash bins should be taken to the curb
                      every week on Tuesday. Recycling should be taken to the
                      curb every other Tuesday.
    post:
      tags:
        - Tasks
      operationId: addTask
      summary: Add a task to the collection
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/task'
  /v1/members/pending:
    summary: Handle members who have not yet been approved
    get:
      tags:
        - Members
      summary: Get a list of pending Wild Apricot IDs
      description: ''
      operationId: ''
      responses:
        '500':
          description: Server error
        '200':
            description: List of pending members
          content:
            application/json:
              schmea:
                $ref: '#/components/schemas/WildApricotMembers'
  /v1/member:
    summary: Manage members
    put:
      tags:
        - Members
      summary: Add a member
      description: ''
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleMemberData'
      responses:
        '400':
          description: Validation error
        '500':
          description: Server error
        '204':
          description: Created
          content:
            text/plain:
              schmea:
                type: string
  '/v1/member/:member_id':
    get:
      tags:
        - Members
      summary: Returns basic member data
      description: ''
      operationId: ''
      responses:
        '400':
          description: Validation error
        '404':
          description: Member was not found
        '500':
          description: Server error
        '200':
            description: Member data
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SimpleMemberData'
  '/v1/member/:member_id/address':
    put:
      tags:
        - Members
      summary: Add US address to member
      description: ''
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/USAddress'
      responses:
        '204':
          description: Address Added
        '404':
          description: Could not find member for given ID
        '500':
          description: Server error
    get:
      tags:
        - Members
      summary: Returns member address
      description: ''
      operationId: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/USAddress'
        '404':
          description: Could not find member for given ID
        '500':
          description: Server error
  '/v1/member/:member_id/is_active':
    put:
      tags:
        - Members
      summary: Sets a member to be active or not
      description: ''
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IsActive'
      responses:
        '400':
          description: Validation error
        '404':
          description: Member was not found
        '500':
          description: Server error
        '200':
          description: Set active or not
    get:
      tags:
        - Members
      summary: Returns current member status
      description: ''
      operationId: ''
      responses:
        '400':
          description: Validation error
        '404':
          description: Member was not found
        '500':
          description: Server error
        '200':
          description: Returns active or inactive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsActive'
  '/v1/member/:member_id/rfid':
    put:
      tags:
        - Members
      summary: Sets the RFID tag for a member
      description: ''
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RFID'
      responses:
        '400':
          description: Validation error
        '404':
          description: Member was not found
        '500':
          description: Server error
        '200':
          description: Set the RFID
  '/v1/rfid/:rfid':
    get:
      tags:
        - Members
      summary: Check if given RFID is active
      description: ''
      operationId: ''
      responses:
        '200':
          description: RFID is active
        '403':
          description: RFID exists, but not active
        '404':
          description: RFID not found
        '500':
          description: Server error
  '/v1/member/:member_id/wildapricot':
    put:
      tags:
        - Members
      summary: Set the member's Wild Apricot ID
      description: ''
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WildApricotMemberID'
      responses:
        '204':
          description: Set member's Wild Apricot ID
  '/v/1/member/:member_id/list/:name':
    put:
      summary: Sign a member up for the specified mailing list
      description: ''
      operationId: ''
      responses:
        '204':
          description: Signed member up for the mailing list
  '/v1/member/:member_id/slack':
    put:
      summary: Signs member up for Slack
      description: ''
      operationId: ''
      responses:
        '204':
          description: Signed member up for Slack
components:
  schemas:
    SimpleMemberData:
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
          format: phone
        email:
          type: string
          format: email
        photo:
          type: string
          format: url
    Member:
      required:
        - id
      properties:
        id:
          type: integer
          description: Member ID
        name:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        address:
          $ref: '#/components/schemas/USAddress'
        photo:
          type: string
          description: Url for photo
        approvedTools:
          $ref: '#/components/schemas/Tools'
        phone:
          type: string
        profile:
          $ref: '#/components/schemas/Questions'
    Questions:
      type: array
      items:
        $ref: '#/components/schemas/Question'
    Question:
      properties:
        question:
          type: string
        answer:
          type: string
    Members:
      type: array
      items:
        $ref: '#/components/schemas/Member'
    SimpleMemberData:
      properties:
        rfid:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
          format: phone
        email:
          type: string
          format: email
    USAddress:
      properties:
        name:
          type: string
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
    Tool:
      properties:
        id:
          type: integer
        toolName:
          type: string
        description:
          type: string
          maxLength: 255
        color:
          type: string
          enum:
            - green
            - yellow
            - red
        brand:
          type: string
        model:
          type: string
        serial:
          type: string
        manualUrl:
          type: string
        owner:
          $ref: '#/components/schemas/Member'
    Tools:
      type: array
      items:
        $ref: '#/components/schemas/Tool'
    WildApricotMember:
      properties:
        wild_apricot_id:
          type: integer
        is_active:
          type: boolean
    WildApricotMembers:
      type: array
      items:
        $ref: '#/components/schemas/WildApricotMember'
    Area:
      properties:
        id:
          type: integer
        name:
          type: string
        captains:
          $ref: '#/components/schemas/Members'
    Areas:
      type: array
      items:
        $ref: '#/components/schemas/Area'
    IsActive:
      properties:
        is_active:
          type: boolean
    RFID:
      properties:
        rfid:
          type: string
    Telemetry:
      type: object
      properties:
        id:
          type: integer
    Project:
      type: object
      properties:
        id:
          type: integer
    Projects:
      type: array
      items:
        $ref: '#/components/schemas/Project'
    Space:
      type: object
      properties:
        api:
          type: string
        space:
          type: string
        logo:
          type: string
        url:
          type: string
        location:
          type: object
          properties:
            address:
              type: string
            lon:
              type: string
            lat:
              type: string
        contact:
          type: object
          properties:
            email:
              type: string
            irc:
              type: string
            ml:
              type: string
            twitter:
              type: string
        state:
          type: object
          properties:
            icon:
              type: object
              properties:
                open:
                  type: string
                closed:
                  type: string
            open:
              type: boolean
        projects:
          type: array
          items:
            type: string
    taskList:
      type: array
      items:
        $ref: '#/components/schemas/task'
    task:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 8000
